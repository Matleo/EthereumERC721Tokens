package database;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Optional;
import java.util.Set;

@Controller// This means that this class is a Controller
@RequestMapping(path = "fishToken")
public class FishTokenController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FishTokenRepository fishTokenRepository;

    @CrossOrigin(origins = "*")
    @GetMapping(path = "/all", produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody
    Iterable<FishToken> getAllFishTokens() {
        // This returns a JSON or XML with the users
        return fishTokenRepository.findAll();
    }


    @CrossOrigin(origins = "*")
    @GetMapping(path = "/", produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody
    FishToken getFishToken(@RequestParam Long token_id) {

        return fishTokenRepository.findById(token_id).get();
    }


    @CrossOrigin(origins = "*")
    @PostMapping(path = "/", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody
    Action addOrUpdateSimpleToken(@RequestBody FishToken fishToken) {
        Optional<FishToken> existingToken = fishTokenRepository.findById(fishToken.getToken_Id());

        Action action = new Action();

        if (existingToken.isPresent()) {

            FishToken updateToken = existingToken.get();
            updateToken.setName(fishToken.getName());
            updateToken.setSpeed(fishToken.getSpeed());
            updateToken.setHeadType(fishToken.getHeadType());
            updateToken.setTailType(fishToken.getTailType());
            fishTokenRepository.save(updateToken);

            action.setDatabaseAction(DatabaseAction.updated);
            action.setToken(updateToken);
            return action;
        } else {

            fishTokenRepository.save(fishToken);
            action.setDatabaseAction(DatabaseAction.created);
            action.setToken(fishToken);
            return action;
        }

    }


    @CrossOrigin(origins = "*")
    @DeleteMapping(path = "/", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody
    Action deleteSimpleToken(@RequestBody FishToken fishToken) {

        Action action = new Action<FishToken>();
        action.setDatabaseAction(DatabaseAction.deleted);

        Optional<FishToken> existingToken = fishTokenRepository.findById(fishToken.getToken_Id());

        if (existingToken.isPresent()) {

            FishToken deleteToken = existingToken.get();
            action.setToken(deleteToken);
            fishTokenRepository.delete(deleteToken);
        }
        return action;
    }


    @CrossOrigin(origins = "*")
    @GetMapping(path="/owner", produces = MediaType.APPLICATION_JSON_VALUE )
    public @ResponseBody Iterable<FishToken> getTokensByOwner(@RequestParam String token_ids) {

        String[] string_ids = token_ids.split(",");
        Set<Long> ids  = new HashSet<Long>();
        for(int i=0; i< string_ids.length; i++){

         ids.add(Long.parseLong(string_ids[i]));
        }
    	
    	return fishTokenRepository.findAllById(ids);
    }



}
